<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>架构的春天</title>
  
  <subtitle>好的架构是码农的春天，不用加班、有时间泡妞</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-11T01:32:47.257Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>严彬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker基础架构</title>
    <link href="http://yoursite.com/2018/12/11/hello-world/"/>
    <id>http://yoursite.com/2018/12/11/hello-world/</id>
    <published>2018-12-11T10:13:58.000Z</published>
    <updated>2018-12-11T01:32:47.257Z</updated>
    
    <content type="html"><![CDATA[<p>在持续集成与部署方面，我们主要还是在用 git 和 jenkins 。通过 jenkins 我们自己做了一个自动化接口测试平台。目前只是做接口测试，而性能测试在大版本发布之前会集中来做。通过我们的测试，构建之后会发到 harbor，一个企业级的镜像仓库，而实际的部署，是用到 rancher，不可否认 rancher 是在容器管理编排方面的小白入门的利器，我们开始用它也是因为它的界面比较清爽，有起来比较简单。在 rancher 上主要实现两个方案，一个是部署，一个是升级。<br><a id="more"></a></p><p><img src="https://upload-images.jianshu.io/upload_images/5189695-0f77a07c50f709a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="一、docker基础概念"><a href="#一、docker基础概念" class="headerlink" title="一、docker基础概念"></a>一、docker基础概念</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h4 id="1、Docker有以下几个部分组成："><a href="#1、Docker有以下几个部分组成：" class="headerlink" title="1、Docker有以下几个部分组成："></a>1、Docker有以下几个部分组成：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- Client客户端</span><br><span class="line">- Docker Daemon守护进程</span><br><span class="line">- Docker Image镜像</span><br><span class="line">- DockerContainer容器</span><br><span class="line">- Registry镜像仓库</span><br></pre></td></tr></table></figure><h4 id="2、Docker的三大核心概念：镜像、容器、仓库"><a href="#2、Docker的三大核心概念：镜像、容器、仓库" class="headerlink" title="2、Docker的三大核心概念：镜像、容器、仓库"></a>2、Docker的三大核心概念：镜像、容器、仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   镜像：类似虚拟机的镜像、用俗话说就是安装文件。</span><br><span class="line">- 容器：类似一个轻量级的沙箱，容器是从镜像创建应用运行实例，</span><br><span class="line">-       可以将其启动、开始、停止、删除、而这些容器都是相互隔离、互不可见的。</span><br><span class="line">- 仓库：类似代码仓库，是Docker集中存放镜像文件的场所。</span><br></pre></td></tr></table></figure><p>Docker采用 C/S架构 Docker daemon 作为服务端接受来自客户的请求，<br>并处理这些请求（创建、运行、分发容器）。<br>客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。</p><h2 id="二-docker安装"><a href="#二-docker安装" class="headerlink" title="二.docker安装"></a>二.docker安装</h2><p>linux系统环境 ，同时需要注意Linux系统必须能够上网,虚拟机使用桥接模式<br>建议使用centos7版本安装docker，docker容器需要镜像文件容器与镜像文件的关系就类似于类与对象的关系。</p><h2 id="三-docker安装步骤"><a href="#三-docker安装步骤" class="headerlink" title="三.docker安装步骤"></a>三.docker安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、使用yum命令在线安装:yum install docker</span><br><span class="line">2、查看docker的版本命令:docker -v</span><br><span class="line">3、启动docker：systemctl start docker</span><br><span class="line">4、停止docker：systemctl stop docker</span><br><span class="line">5、重启docker：systemctl restart docker</span><br><span class="line">6、查看docker状态：systemctl status docker</span><br><span class="line">7、开机启动：systemctl enable docker</span><br><span class="line">8、查看docker概要信息：docker info</span><br><span class="line">9、查看docker帮助文档：docker --help</span><br></pre></td></tr></table></figure><pre><code>systemctl命令是系统服务管理器指令，它是 service 和 chkconfig 两个命令组合</code></pre><h2 id="四、docker操作镜像"><a href="#四、docker操作镜像" class="headerlink" title="四、docker操作镜像"></a>四、docker操作镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、docker images #查看本机上所有的镜像文件</span><br><span class="line">    REPOSITORY：镜像所在的仓库名称</span><br><span class="line">TAG：镜像标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：镜像的创建日期（不是获取该镜像的日期）</span><br><span class="line">SIZE：镜像大小</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2、docker search 镜像名称 #在注册中心(仓库)上进行搜索镜像</span><br><span class="line">NAME：仓库名称</span><br><span class="line">DESCRIPTION：镜像描述</span><br><span class="line">STARS：用户评价，反应一个镜像的受欢迎程度</span><br><span class="line">OFFICIAL：是否官方</span><br><span class="line">    AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">3、下载镜像:docker pull zookeeper</span><br><span class="line">   注意:默认是从官网下载</span><br><span class="line">可以ustc的docker镜像加速器速度很快。</span><br><span class="line">ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</span><br><span class="line">(1)编辑该文件：vi /etc/docker/daemon.json  // 如果该文件不存在就手动创建；说明：在centos7.x下，通过vi。</span><br><span class="line">(2)在该文件中输入如下内容：</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br><span class="line">(3)注意：一定要重启docker服务(systemctl restart docker.service)，如果重启docker后无法加速，可以重新启动OS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4、docker rmi $IMAGE_ID：删除指定镜像</span><br><span class="line">    docker rmi `docker images -q`：删除所有镜像</span><br><span class="line">    #$IMAGE_ID 镜像ID，通过docker images可以查看到镜像的ID</span><br></pre></td></tr></table></figure><h2 id="五、docker容器操作"><a href="#五、docker容器操作" class="headerlink" title="五、docker容器操作"></a>五、docker容器操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.查看容器操作:</span><br><span class="line">1)查看正在运行的容器:docker ps</span><br><span class="line">2)查看所有的容器（启动过的历史容器）:docker ps -a</span><br><span class="line">3)查看最后一次运行的容器：docker ps -l</span><br><span class="line">4)查看停止的容器：docker ps -f status=exited</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">2.创建与启动容器</span><br><span class="line">(1)创建容器需要的参数</span><br><span class="line">创建容器命令：docker run</span><br><span class="line">-i：表示运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</span><br><span class="line">--name :为创建的容器命名。比如:--name=mysqlcat</span><br><span class="line">-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），</span><br><span class="line">      可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line">-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，</span><br><span class="line">      如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line">-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个－p做多个端口映射</span><br><span class="line">(2)创建容器的两种方式:</span><br><span class="line">交互式容器：创建容器启动后会进入其命令行。</span><br><span class="line">docker -it --name=mycentos centos:7 /bin/bash</span><br><span class="line">说明:centos:7----可以使用docker images查看 7表示TAG：镜像标签 如果镜像名称为latest，就可以不用写</span><br><span class="line">/bin/bash表示linux的执行命令</span><br><span class="line">注意: 使用exit命令 退出当前容器，容器会关机</span><br><span class="line"></span><br><span class="line">守护式容器:类似于启动服务的进程一样，不会进入容器</span><br><span class="line">docker -di --name=mycentos2 centos:7</span><br><span class="line">进入容器:docke exec -it mycentos2 /bin/bash</span><br><span class="line">注意:使用exit命令，退出当前容器，但是容器不会关机</span><br><span class="line">(3)停止容器和启动容器</span><br><span class="line">停止容器:docker stop 容器的名称/容器的id</span><br><span class="line">启动容器:docker start 容器的名称/容器的id</span><br><span class="line">说明:容器的id可以通过docker ps -a 查看到，也就是:CONTAINER ID</span><br><span class="line"></span><br><span class="line">(4)删除容器</span><br><span class="line">    删除指定的容器：docker rm $CONTAINER_ID/NAME 注意:只能删除停掉的容器</span><br><span class="line">    删除所有容器：docker rm `docker ps -a -q`</span><br><span class="line"></span><br><span class="line">(5)文件拷贝(从宿主机拷贝到我们创建的容器)</span><br><span class="line">docker cp 需要拷贝的文件或者目录 容器名称:容器的目录</span><br><span class="line">注意:容器名称后面有冒号</span><br><span class="line"></span><br><span class="line">也可以将文件从容器内拷贝出来</span><br><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br><span class="line"></span><br><span class="line">(6)目录挂载</span><br><span class="line">    我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，</span><br><span class="line">这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。</span><br><span class="line">创建容器 添加-v参数 后边为   宿主机目录:容器目录</span><br><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos2 centos:7</span><br><span class="line">如果你共享的是多级的目录，可能会出现权限不足的提示。</span><br><span class="line">说明:容器里的目录可以不存在在进行映射的时候会自动创建。</span><br><span class="line"></span><br><span class="line">这是因为CentOS7中的安全模块selinux把权限禁掉了，</span><br><span class="line">我们在创建容器的时候需要添加参数  --privileged=true  来解决挂载的目录没有权限的问题</span><br><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos --privileged=true centos:7</span><br><span class="line"></span><br><span class="line">(7)查看容器IP地址</span><br><span class="line">    我们可以通过以下命令查看容器运行的各种数据</span><br><span class="line">docker inspect 容器的名称</span><br><span class="line"></span><br><span class="line">也可以直接执行下面的命令直接输出IP地址</span><br><span class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; mycentos2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在持续集成与部署方面，我们主要还是在用 git 和 jenkins 。通过 jenkins 我们自己做了一个自动化接口测试平台。目前只是做接口测试，而性能测试在大版本发布之前会集中来做。通过我们的测试，构建之后会发到 harbor，一个企业级的镜像仓库，而实际的部署，是用到 rancher，不可否认 rancher 是在容器管理编排方面的小白入门的利器，我们开始用它也是因为它的界面比较清爽，有起来比较简单。在 rancher 上主要实现两个方案，一个是部署，一个是升级。&lt;br&gt;
    
    </summary>
    
      <category term="自动化构建" scheme="http://yoursite.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="devops" scheme="http://yoursite.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>网络结构图</title>
    <link href="http://yoursite.com/2018/11/29/network/"/>
    <id>http://yoursite.com/2018/11/29/network/</id>
    <published>2018-11-29T13:55:05.000Z</published>
    <updated>2018-11-29T05:57:32.824Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-4c13ea4c090562dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-4c13ea4c090562dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>elk日志平台架构</title>
    <link href="http://yoursite.com/2018/11/28/elk/"/>
    <id>http://yoursite.com/2018/11/28/elk/</id>
    <published>2018-11-28T14:28:30.000Z</published>
    <updated>2018-11-29T05:43:49.631Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-33f92605c263a270.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5189695-dd431d6c098f27df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5189695-59bf65779f817045.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-33f92605c263a270.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>idea开发架构</title>
    <link href="http://yoursite.com/2018/11/28/idea/"/>
    <id>http://yoursite.com/2018/11/28/idea/</id>
    <published>2018-11-28T13:23:39.000Z</published>
    <updated>2018-11-28T05:24:25.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-0c956d9c54be11e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-0c956d9c54be11e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务高可用</title>
    <link href="http://yoursite.com/2018/11/28/spring-cloud-ha/"/>
    <id>http://yoursite.com/2018/11/28/spring-cloud-ha/</id>
    <published>2018-11-28T12:55:03.000Z</published>
    <updated>2018-11-28T04:58:45.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-9db6a584bacc7efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-9db6a584bacc7efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BI数据架构</title>
    <link href="http://yoursite.com/2018/11/28/bi/"/>
    <id>http://yoursite.com/2018/11/28/bi/</id>
    <published>2018-11-28T11:13:58.000Z</published>
    <updated>2018-12-10T10:08:29.158Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-4591d567c4b177e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-4591d567c4b177e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="决策分析" scheme="http://yoursite.com/categories/%E5%86%B3%E7%AD%96%E5%88%86%E6%9E%90/"/>
    
    
      <category term="bi" scheme="http://yoursite.com/tags/bi/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud微服务</title>
    <link href="http://yoursite.com/2018/11/28/spring-cloud/"/>
    <id>http://yoursite.com/2018/11/28/spring-cloud/</id>
    <published>2018-11-28T10:37:21.000Z</published>
    <updated>2018-11-29T00:59:13.077Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-fb5af178b28c633a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-fb5af178b28c633a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>devops最佳实践</title>
    <link href="http://yoursite.com/2018/11/28/devops-1/"/>
    <id>http://yoursite.com/2018/11/28/devops-1/</id>
    <published>2018-11-28T10:21:13.000Z</published>
    <updated>2018-11-28T02:26:07.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5189695-a87aa3812e76ab4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5189695-a87aa3812e76ab4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Docker的开发环境、测试环境和生产环境的持续集成和持续交付</title>
    <link href="http://yoursite.com/2018/11/28/devops/"/>
    <id>http://yoursite.com/2018/11/28/devops/</id>
    <published>2018-11-28T02:11:49.592Z</published>
    <updated>2018-12-11T01:03:19.470Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在整个做微服务的过程中，运维与测试相关的能力是积淀。因为如果你的运维和测试能力跟不上，在你服务做拆分以后，部署、测试都会面临特别大的压力。我们整个“运维+测试”两个团队才6个人，如果服务从原来比如单体应用只有4个，到现在40多个，而没有一个很好的，比如持续集成与部署相关设施的，那绝对是灾难性的。刚才说到的那些日志搜集都要搜集起来，有一个服务之间的调用关系的调用链的管理，能帮我快速的定位一些问题。<br><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/5189695-6c33f5f5aa01f7c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在整个做微服务的过程中，运维与测试相关的能力是积淀。因为如果你的运维和测试能力跟不上，在你服务做拆分以后，部署、测试都会面临特别大的压力。我们整个“运维+测试”两个团队才6个人，如果服务从原来比如单体应用只有4个，到现在40多个，而没有一个很好的，比如持续集成与部署相关设施的，那绝对是灾难性的。刚才说到的那些日志搜集都要搜集起来，有一个服务之间的调用关系的调用链的管理，能帮我快速的定位一些问题。&lt;br&gt;
    
    </summary>
    
      <category term="自动化构建" scheme="http://yoursite.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="devops" scheme="http://yoursite.com/tags/devops/"/>
    
  </entry>
  
</feed>
