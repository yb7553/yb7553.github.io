<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BI数据架构]]></title>
    <url>%2F2018%2F12%2F11%2Fbi%2F</url>
    <content type="text"><![CDATA[马云曾经在一次演讲中说道：“人类正从IT时代走向DT时代”。IT是我们已经非常熟悉了，是信息技术（Information Technology）的英文缩写，而DT则是数据处理技术（Data Technology）的英文缩写。那么，DT与IT有什么不一样呢？马云提出，IT时代是以自我控制、自我管理为主，而DT时代，它是以服务大众、激发生产力为主的技术。这两者之间看起来似乎是一种技术的差异，但实际上是思想观念层面的差异。接下来，我们就来看看，DT时代下，BI是如何服务企业、助力企业的？]]></content>
      <categories>
        <category>决策分析</category>
      </categories>
      <tags>
        <tag>bi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker基础架构]]></title>
    <url>%2F2018%2F12%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[首先我们从 “Hello from Docker!”开始，了解 docker 的运转流程，docker 经过了这些步骤： docker 客户端连接 docker daemon 进程。 docker daemon 向 docker hub 请求 “hello-world”镜像。 docker daemon 从这个镜像，创建一个新的容器并产生了你看到的输出内容。 docker daemon 流输出到 docker 客户端 ，并输出到你的终端。 Docker一、docker基础概念Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。 1、Docker有以下几个部分组成：12345- Client客户端- Docker Daemon守护进程- Docker Image镜像- DockerContainer容器- Registry镜像仓库 2、Docker的三大核心概念：镜像、容器、仓库1234- 镜像：类似虚拟机的镜像、用俗话说就是安装文件。- 容器：类似一个轻量级的沙箱，容器是从镜像创建应用运行实例，- 可以将其启动、开始、停止、删除、而这些容器都是相互隔离、互不可见的。- 仓库：类似代码仓库，是Docker集中存放镜像文件的场所。 Docker采用 C/S架构 Docker daemon 作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。 二.docker安装linux系统环境 ，同时需要注意Linux系统必须能够上网,虚拟机使用桥接模式建议使用centos7版本安装docker，docker容器需要镜像文件容器与镜像文件的关系就类似于类与对象的关系。 三.docker安装步骤1234567891、使用yum命令在线安装:yum install docker 2、查看docker的版本命令:docker -v 3、启动docker：systemctl start docker 4、停止docker：systemctl stop docker 5、重启docker：systemctl restart docker 6、查看docker状态：systemctl status docker 7、开机启动：systemctl enable docker 8、查看docker概要信息：docker info 9、查看docker帮助文档：docker --help systemctl命令是系统服务管理器指令，它是 service 和 chkconfig 两个命令组合 四、docker操作镜像1234561、docker images #查看本机上所有的镜像文件 REPOSITORY：镜像所在的仓库名称 TAG：镜像标签 IMAGE ID：镜像ID CREATED：镜像的创建日期（不是获取该镜像的日期） SIZE：镜像大小 1234562、docker search 镜像名称 #在注册中心(仓库)上进行搜索镜像 NAME：仓库名称 DESCRIPTION：镜像描述 STARS：用户评价，反应一个镜像的受欢迎程度 OFFICIAL：是否官方 AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的 123456789101112133、下载镜像:docker pull zookeeper 注意:默认是从官网下载 可以ustc的docker镜像加速器速度很快。 ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。 (1)编辑该文件：vi /etc/docker/daemon.json // 如果该文件不存在就手动创建；说明：在centos7.x下，通过vi。 (2)在该文件中输入如下内容： &#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;] &#125; (3)注意：一定要重启docker服务(systemctl restart docker.service)，如果重启docker后无法加速，可以重新启动OS https://lug.ustc.edu.cn/wiki/mirrors/help/docker 1234、docker rmi $IMAGE_ID：删除指定镜像 docker rmi `docker images -q`：删除所有镜像 #$IMAGE_ID 镜像ID，通过docker images可以查看到镜像的ID 五、docker容器操作123451.查看容器操作: 1)查看正在运行的容器:docker ps 2)查看所有的容器（启动过的历史容器）:docker ps -a 3)查看最后一次运行的容器：docker ps -l 4)查看停止的容器：docker ps -f status=exited 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455562.创建与启动容器(1)创建容器需要的参数创建容器命令：docker run -i：表示运行容器 -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。 --name :为创建的容器命名。比如:--name=mysqlcat -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录）， 可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。 -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器， 如果只加-i -t两个参数，创建后就会自动进去容器）。 -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个－p做多个端口映射(2)创建容器的两种方式: 交互式容器：创建容器启动后会进入其命令行。 docker -it --name=mycentos centos:7 /bin/bash 说明:centos:7----可以使用docker images查看 7表示TAG：镜像标签 如果镜像名称为latest，就可以不用写 /bin/bash表示linux的执行命令 注意: 使用exit命令 退出当前容器，容器会关机 守护式容器:类似于启动服务的进程一样，不会进入容器 docker -di --name=mycentos2 centos:7 进入容器:docke exec -it mycentos2 /bin/bash 注意:使用exit命令，退出当前容器，但是容器不会关机(3)停止容器和启动容器 停止容器:docker stop 容器的名称/容器的id 启动容器:docker start 容器的名称/容器的id 说明:容器的id可以通过docker ps -a 查看到，也就是:CONTAINER ID(4)删除容器 删除指定的容器：docker rm $CONTAINER_ID/NAME 注意:只能删除停掉的容器 删除所有容器：docker rm `docker ps -a -q` (5)文件拷贝(从宿主机拷贝到我们创建的容器) docker cp 需要拷贝的文件或者目录 容器名称:容器的目录 注意:容器名称后面有冒号 也可以将文件从容器内拷贝出来 docker cp 容器名称:容器目录 需要拷贝的文件或目录(6)目录挂载 我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。创建容器 添加-v参数 后边为 宿主机目录:容器目录docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos2 centos:7如果你共享的是多级的目录，可能会出现权限不足的提示。说明:容器里的目录可以不存在在进行映射的时候会自动创建。这是因为CentOS7中的安全模块selinux把权限禁掉了，我们在创建容器的时候需要添加参数 --privileged=true 来解决挂载的目录没有权限的问题docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos --privileged=true centos:7(7)查看容器IP地址 我们可以通过以下命令查看容器运行的各种数据docker inspect 容器的名称也可以直接执行下面的命令直接输出IP地址docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; mycentos2]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络结构图]]></title>
    <url>%2F2018%2F11%2F29%2Fnetwork%2F</url>
    <content type="text"><![CDATA[主流的设计一般会采用微服务架构。其思路不是开发一个巨大的单体式应用，而是将应用分解为小的、互相连接的微服务。一个微服务完成某个特定功能，比如乘客管理和下单管理等。每个微服务都有自己的业务逻辑和适配器。一些微服务还会提供API接口给其他微服务和应用客户端使用。]]></content>
      <categories>
        <category>基础设施</category>
      </categories>
      <tags>
        <tag>base</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elk日志平台架构]]></title>
    <url>%2F2018%2F11%2F28%2Felk%2F</url>
    <content type="text"><![CDATA[此外还要注意日志收集的部分。像传统的方法存在一个问题，在 Docker 环境下，一个宿主机上面有很多不同服务的业务实例，那这些日志怎么办？难道要按个做脚本采集文件信息吗？更大的问题是你是有 file 的，如果是云上买的，你可能需要扩大磁盘的容量，因为你有可能需要做监控脚本，清理日志。在做到微服务、容器化之后，第一个要做的就是让你的日志减少，这样就没有文件，直接通过 SDD Out 的方式，对 logstash、sleuth 采集起来之后，可以直接送日志数据，中间不会产生一个日志，不会清理。因为我们之前一开始还没有做这套运维基础的时候，经常都需要手工的清日志，在业务量突增的时候会产生很多日志。我们做征信的时候中间要打很多日志，可能一次请求里面要打十几兆的日志，因为涉及到的第三方数据源实在太多了，中间有很多计算的过程也要打印下来，否则的话没法知道中间到底出了什么问题。]]></content>
      <categories>
        <category>日志管理</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea开发架构]]></title>
    <url>%2F2018%2F11%2F28%2Fidea%2F</url>
    <content type="text"><![CDATA[随着Google宣布基于IntelliJ Platform二次开发的Android IDE即Android Studio成为Android官方唯一指定的IDE，且Eclipse ADT不再维护，IntelliJ IDEA备受关注再次迎来了快速发展的时刻，如今越来越多的程序员开始尝试使用IntelliJ IDEA并作为日常开发工具，并且JetBrains旗下也推出了PyCharm（Python IDE）、PhpStorm（世界上最好的编程语言，没有之一–PHP）、WebStorm（前端开发工具）以及GoLand（Go语言IDE，够烂的，显然JetBrains没问问中国程序员这名字起的好不好）等等，于是有这么一句话“JetBrains出品，必属精品”]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微服务高可用]]></title>
    <url>%2F2018%2F11%2F28%2Fspring-cloud-ha%2F</url>
    <content type="text"><![CDATA[动态的环境和分布式的系统，比如微服务，它们出现故障的几率更大；发生故障的服务应该被隔离开来，实现优雅的服务降级，提升用户体验；70% 的故障都是因为代码变更引起的，所以有时候回退代码并不算是什么坏事；如果发生故障，就要让它们快速而独立的发生；一个团队无法控制他们服务的依赖项；缓存、隔板、回路断路器和速率限定器这些架构模式有助于构建可靠的微服务。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring cloud微服务]]></title>
    <url>%2F2018%2F11%2F28%2Fspring-cloud%2F</url>
    <content type="text"><![CDATA[2008年以后，国内互联网行业飞速发展，我们对软件系统的需求已经不再是过去”能用就行”这种很low的档次了，像抢红包、双十一这样的活动不断逼迫我们去突破软件系统的性能上限，传统的IT企业”能用就行”的开发思想已经不能满足互联网高并发、大流量的性能要求。系统架构走向分布式已经是服务器开发领域解决该问题唯一的出路，然而分布式系统由于天生的复杂度，并不像开发单体应用一样把框架一堆就能搞定，因此各大互联网公司都在投入技术力量研发自己的基础设施。这里面比较有名的如阿里的开源项目dubbo, Netflix开发的一系列服务框架。在这种“百花齐放”、重复造轮子的状况下，必然要出现一种统一的标准来简化分布式系统的开发，Spring Cloud应运而生。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps最佳实践]]></title>
    <url>%2F2018%2F11%2F28%2Fdevops-1%2F</url>
    <content type="text"><![CDATA[随着互联网对传统企业的冲击，需要更快的业务试错与业务创新，其背后本质是企业IT的精益运营，让软件的生产、交付、获取、升级、遥测变得自动与自助，近两年，DevOps在传统企业也开始备受关注与各种尝试。]]></content>
      <categories>
        <category>自动化构建</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Docker的开发环境、测试环境和生产环境的持续集成和持续交付]]></title>
    <url>%2F2018%2F11%2F28%2Fdevops%2F</url>
    <content type="text"><![CDATA[在整个做微服务的过程中，运维与测试相关的能力是积淀。因为如果你的运维和测试能力跟不上，在你服务做拆分以后，部署、测试都会面临特别大的压力。我们整个“运维+测试”两个团队才6个人，如果服务从原来比如单体应用只有4个，到现在40多个，而没有一个很好的，比如持续集成与部署相关设施的，那绝对是灾难性的。刚才说到的那些日志搜集都要搜集起来，有一个服务之间的调用关系的调用链的管理，能帮我快速的定位一些问题。 代码编写，完成代码功能模块。 构建，实现功能模块构建测试，保证该模块当前的可用状态。 测试，单元测试和集成测试，保证各个功能模块的完整性和稳定性。 交付，建立在CI基础上，让软件的构建、测试与最终版本变得更快以及更频繁。 部署，是在持续交付的基础上，把部署到生产环境的过程自动化。 回滚，一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录]]></content>
      <categories>
        <category>自动化构建</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
</search>
